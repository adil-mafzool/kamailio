From 65bb8e9ee21b81d8b09f58f5a768f94fcc0ee92d Mon Sep 17 00:00:00 2001
From: Victor Seva <linuxmaniac@torreviejawireless.org>
Date: Mon, 12 May 2014 15:42:48 +0200
Subject: [PATCH] dialplan: pv in match and subst

Gbp-Pq-Topic: sipwise
---
 modules/dialplan/dialplan.c |   5 +
 modules/dialplan/dialplan.h |  37 +++-
 modules/dialplan/dp_db.c    | 426 +++++++++++++++++++++++++++++++++++++++++---
 modules/dialplan/dp_db.h    |   1 +
 modules/dialplan/dp_repl.c  | 189 +++++++++++++++++++-
 5 files changed, 622 insertions(+), 36 deletions(-)

diff --git a/modules/dialplan/dialplan.c b/modules/dialplan/dialplan.c
index 07c3271..0ee0e24 100644
--- a/modules/dialplan/dialplan.c
+++ b/modules/dialplan/dialplan.c
@@ -207,6 +207,11 @@ static int mod_init(void)
 
 static int child_init(int rank)
 {
+	if (rank<0)
+		return 0;
+
+	if(init_pv_data(0)<0)
+		LM_ERR("error init pv data\n");
 	return 0;
 }
 
diff --git a/modules/dialplan/dialplan.h b/modules/dialplan/dialplan.h
index fd3319e..b506853 100644
--- a/modules/dialplan/dialplan.h
+++ b/modules/dialplan/dialplan.h
@@ -44,6 +44,15 @@
 #define DP_REGEX_OP		1
 #define DP_FNMATCH_OP	2
 
+#define DP_PV_MATCH		(1 << 0)
+#define DP_PV_MATCH_M	(1 << 1) /* PV_MARKER at the end */
+#define DP_PV_SUBST		(1 << 2)
+#define DP_PV_SUBST_M	(1 << 3) /* PV_MARKER at the end */
+
+#define DP_PV_MASK (DP_PV_MATCH|DP_PV_SUBST)
+#define DP_PV_MATCH_MASK (DP_PV_MATCH|DP_PV_MATCH_M)
+#define DP_PV_SUBST_MASK (DP_PV_SUBST|DP_PV_SUBST_M)
+
 #define MAX_REPLACE_WITH	10
 
 typedef struct dpl_node{
@@ -55,6 +64,7 @@ typedef struct dpl_node{
 	pcre *match_comp, *subst_comp; /*compiled patterns*/
 	struct subst_expr * repl_comp; 
 	str attrs;
+	unsigned int pv_flags;
 
 	struct dpl_node * next; /*next rule*/
 }dpl_node_t, *dpl_node_p;
@@ -75,6 +85,30 @@ typedef struct dpl_id{
 	struct dpl_id * next;
 }dpl_id_t,*dpl_id_p;
 
+typedef struct dpl_pv_node{
+	pv_elem_p match_elem, subst_elem;
+	str match_exp, subst_exp; /* exp without end dollar char */
+	pcre *match_comp, *subst_comp; /* compiled patterns */
+
+	struct dpl_pv_node * next; /* next rule */
+	struct dpl_node * orig; /* shared rule */
+}dpl_pv_node_t, *dpl_pv_node_p;
+
+/*For every distinct length of a matching string*/
+typedef struct dpl_pv_index{
+	int len;
+	dpl_pv_node_t * first_rule;
+	dpl_pv_node_t * last_rule;
+
+	struct dpl_pv_index * next;
+}dpl_pv_index_t, *dpl_pv_index_p;
+
+/*For every DPID*/
+typedef struct dpl_pv_id{
+	int dp_id;
+	dpl_pv_index_t* first_index;/*fast access :rules with specific length*/
+	struct dpl_pv_id * next;
+}dpl_pv_id_t,*dpl_pv_id_p;
 
 #define DP_VAL_INT		0
 #define DP_VAL_SPEC		1
@@ -92,9 +126,10 @@ void destroy_data();
 int dp_load_db();
 
 dpl_id_p select_dpid(int id);
+dpl_pv_id_p select_pv_dpid(int id);
 
 struct subst_expr* repl_exp_parse(str subst);
 void repl_expr_free(struct subst_expr *se);
 int translate(struct sip_msg *msg, str user_name, str* repl_user, dpl_id_p idp, str *);
-int rule_translate(struct sip_msg *msg, str , dpl_node_t * rule,  str *);
+int rule_translate(struct sip_msg *msg, str , dpl_node_t * rule, dpl_pv_node_t * rule_pv, str *);
 #endif
diff --git a/modules/dialplan/dp_db.c b/modules/dialplan/dp_db.c
index 70d37a3..d129748 100644
--- a/modules/dialplan/dp_db.c
+++ b/modules/dialplan/dp_db.c
@@ -70,6 +70,9 @@ static db_func_t dp_dbf;
 		(_res).len = strlen(VAL_STR((_values)+ (_index)).s);\
 	}while(0);
 
+int generate_pv_hash(void);
+void destroy_pv_rule(dpl_pv_node_t * rule);
+void destroy_pv_hash(void);
 void destroy_rule(dpl_node_t * rule);
 void destroy_hash(int);
 
@@ -78,12 +81,16 @@ int add_rule2hash(dpl_node_t *, int);
 
 void list_rule(dpl_node_t * );
 void list_hash(int h_index);
-
+void list_pv_rule(dpl_pv_node_t * );
+void list_pv_hash(void);
+void show_pv_flags(unsigned int flag);
 
 dpl_id_p* rules_hash = NULL;
 int * crt_idx, *next_idx;
+int *sh_revision;
+int  pv_revision = 0;
 
-
+dpl_pv_id_p rules_pv_hash = NULL;
 
 int init_db_data(void)
 {
@@ -163,14 +170,15 @@ int init_data(void)
 	}
 	rules_hash[0] = rules_hash[1] = 0;
 
-	p = (int *)shm_malloc(2*sizeof(int));
+	p = (int *)shm_malloc(3*sizeof(int));
 	if(!p){
 		LM_ERR("out of shm memory\n");
 		return -1;
 	}
 	crt_idx = p;
 	next_idx = p+1;
-	*crt_idx = *next_idx = 0;
+	sh_revision = p+2;
+	*crt_idx = *next_idx = *sh_revision = 0;
 
 	LM_DBG("trying to initialize data from db\n");
 	if(init_db_data() != 0)
@@ -193,6 +201,23 @@ void destroy_data(void)
 		shm_free(crt_idx);
 }
 
+void destroy_pv_data(void)
+{
+	if(rules_pv_hash) {
+		destroy_pv_hash();
+		rules_pv_hash = NULL;
+		pv_revision = 0;
+	}
+}
+
+int init_pv_data(void)
+{
+	destroy_pv_data();
+	if (generate_pv_hash()<0) {
+		return -1;
+	}
+	return 0;
+}
 
 /*load rules from DB*/
 int dp_load_db(void)
@@ -283,6 +308,8 @@ end:
 	*crt_idx = *next_idx;
 	list_hash(*crt_idx);
 	dp_dbf.free_result(dp_db_handle, res);
+	*sh_revision = (*sh_revision) + 1;
+	LM_DBG("loaded revision:%d\n", *sh_revision);
 	return 0;
 
 err2:
@@ -352,6 +379,84 @@ static pcre *reg_ex_comp(const char *pattern, int *cap_cnt)
 	return result;
 }
 
+int check_pv_marker(str orig, str *dest)
+{
+	if(dest==NULL||orig.len<1) return -1;
+	dest->s = orig.s;
+	if(orig.s[orig.len-1]==PV_MARKER)
+	{
+		LM_DBG("PV_MARKER detected at the end\n");
+		dest->len = orig.len - 1;
+		return 1;
+	}
+	else
+	{
+		dest->len = orig.len;
+		return 0;
+	}
+}
+
+dpl_pv_node_t * build_pv_rule(dpl_node_t *rule)
+{
+	pv_elem_p match_elem = NULL, subst_elem = NULL;
+	str match_exp = {NULL,0}, subst_exp = {NULL,0};
+	dpl_pv_node_t * new_rule = NULL;
+
+	if(!rule)
+		return NULL;
+
+	if(rule->pv_flags&DP_PV_MATCH)
+	{
+		match_exp.s = rule->match_exp.s;
+		if(rule->pv_flags&DP_PV_MATCH_M){
+			match_exp.len = rule->match_exp.len - 1;
+		}
+		else match_exp.len = rule->match_exp.len;
+		if(pv_parse_format(&match_exp, &match_elem)<0){
+			LM_ERR("parsing match_exp:%.*s\n",
+				match_exp.len, match_exp.s);
+			goto err;
+		}
+	}
+
+	if(rule->pv_flags&DP_PV_SUBST)
+	{
+		subst_exp.s = rule->subst_exp.s;
+		if(rule->pv_flags&DP_PV_SUBST_M){
+			subst_exp.len = rule->subst_exp.len - 1;
+		}
+		else subst_exp.len = rule->subst_exp.len;
+		if(pv_parse_format(&subst_exp, &subst_elem)<0){
+			LM_ERR("parsing subst_exp:%.*s\n",
+				subst_exp.len, subst_exp.s);
+			goto err;
+		}
+	}
+
+	if(rule->pv_flags&DP_PV_MASK){
+		new_rule = (dpl_pv_node_t *)pkg_malloc(sizeof(dpl_pv_node_t));
+		if(!new_rule){
+			LM_ERR("out of pkg memory(new_rule)\n");
+			goto err;
+		}
+		memset(new_rule, 0, sizeof(dpl_pv_node_t));
+		if(rule->pv_flags&DP_PV_MATCH) {
+			new_rule->match_elem = match_elem;
+		}
+		if(rule->pv_flags&DP_PV_SUBST) {
+			new_rule->subst_elem = subst_elem;
+		}
+		new_rule->orig = rule;
+	}
+	return new_rule;
+
+err:
+	if(match_elem) pv_elem_free_all(match_elem);
+	if(subst_elem) pv_elem_free_all(subst_elem);
+	if(new_rule) destroy_pv_rule(new_rule);
+	return NULL;
+}
+
 
 /*compile the expressions, and if ok, build the rule */
 dpl_node_t * build_rule(db_val_t * values)
@@ -359,9 +464,10 @@ dpl_node_t * build_rule(db_val_t * values)
 	pcre *match_comp, *subst_comp;
 	struct subst_expr *repl_comp;
 	dpl_node_t * new_rule;
-	str match_exp, subst_exp, repl_exp, attrs;
+	str match_exp, subst_exp, repl_exp, attrs, tmp;
 	int matchop;
 	int cap_cnt=0;
+	unsigned int pv_flags = 0;
 
 	matchop = VAL_INT(values+2);
 
@@ -377,11 +483,21 @@ dpl_node_t * build_rule(db_val_t * values)
 
 	GET_STR_VALUE(match_exp, values, 3);
 	if(matchop == DP_REGEX_OP){
-		match_comp = reg_ex_comp(match_exp.s, &cap_cnt);
-		if(!match_comp){
-			LM_ERR("failed to compile match expression %.*s\n",
-					match_exp.len, match_exp.s);
-			goto err;
+		if(check_pv_marker(match_exp, &tmp))
+			pv_flags |= DP_PV_MATCH_M;
+		if(pv_check_format(&tmp)<0){
+			pv_flags &= ~DP_PV_MATCH_MASK;
+			match_comp = reg_ex_comp(match_exp.s, &cap_cnt);
+			if(!match_comp){
+				LM_ERR("failed to compile match expression %.*s\n",
+						match_exp.len, match_exp.s);
+				goto err;
+			}
+		}
+		else{
+			pv_flags |= DP_PV_MATCH;
+			LM_DBG("match_exp DP_PV_MATCH_MASK\n");
+			match_comp = NULL;
 		}
 	}
 
@@ -397,29 +513,41 @@ dpl_node_t * build_rule(db_val_t * values)
 
 	GET_STR_VALUE(subst_exp, values, 5);
 	if(subst_exp.s && subst_exp.len){
-		subst_comp = reg_ex_comp(subst_exp.s, &cap_cnt);
-		if(!subst_comp){
-			LM_ERR("failed to compile subst expression %.*s\n",
-					subst_exp.len, subst_exp.s);
-			goto err;
+		if(check_pv_marker(subst_exp, &tmp))
+			pv_flags |= DP_PV_SUBST_M;
+		if(pv_check_format(&tmp)<0){
+			pv_flags &= ~DP_PV_SUBST_MASK;
+			subst_comp = reg_ex_comp(subst_exp.s, &cap_cnt);
+			if(!subst_comp){
+				LM_ERR("failed to compile subst expression %.*s\n",
+						subst_exp.len, subst_exp.s);
+				goto err;
+			}
+			if (cap_cnt > MAX_REPLACE_WITH) {
+				LM_ERR("subst expression %.*s has too many sub-expressions\n",
+						subst_exp.len, subst_exp.s);
+				goto err;
+			}
 		}
-		if (cap_cnt > MAX_REPLACE_WITH) {
-			LM_ERR("subst expression %.*s has too many sub-expressions\n",
-					subst_exp.len, subst_exp.s);
-			goto err;
+		else{
+			pv_flags |= DP_PV_SUBST;
+			LM_DBG("subst_exp DP_PV_SUBST_MASK\n");
+			subst_comp = NULL;
 		}
 	}
 
 	LM_DBG("building rule for [%d:%.*s/%.*s/%.*s]\n", matchop,
 			match_exp.len, ZSW(match_exp.s), subst_exp.len, ZSW(subst_exp.s),
 			repl_exp.len, ZSW(repl_exp.s));
-	if (repl_comp && (cap_cnt < repl_comp->max_pmatch) && 
-			(repl_comp->max_pmatch != 0)) {
-		LM_ERR("repl_exp %.*s refers to %d sub-expressions, but "
-				"subst_exp %.*s has only %d\n",
-				repl_exp.len, repl_exp.s, repl_comp->max_pmatch,
-				subst_exp.len, subst_exp.s, cap_cnt);
-		goto err;
+	if((pv_flags&DP_PV_MASK)==0) {
+		if (repl_comp && (cap_cnt < repl_comp->max_pmatch) &&
+				(repl_comp->max_pmatch != 0)) {
+			LM_ERR("repl_exp %.*s refers to %d sub-expressions, but "
+					"subst_exp %.*s has only %d\n",
+					repl_exp.len, repl_exp.s, repl_comp->max_pmatch,
+					subst_exp.len, subst_exp.s, cap_cnt);
+			goto err;
+		}
 	}
 
 	new_rule = (dpl_node_t *)shm_malloc(sizeof(dpl_node_t));
@@ -452,6 +580,7 @@ dpl_node_t * build_rule(db_val_t * values)
 	new_rule->match_comp = match_comp;
 	new_rule->subst_comp = subst_comp;
 	new_rule->repl_comp  = repl_comp;
+	new_rule->pv_flags = pv_flags;
 
 	return new_rule;
 
@@ -552,6 +681,85 @@ err:
 	return -1;
 }
 
+int add_rule2hash_pv(dpl_pv_node_t * rule)
+{
+	dpl_pv_id_p crt_idp, last_idp;
+	dpl_pv_index_p indexp, last_indexp, new_indexp;
+	int new_id = 0;
+
+	/*search for the corresponding dpl_id*/
+	for(crt_idp = last_idp =rules_pv_hash; crt_idp!= NULL;
+			last_idp = crt_idp, crt_idp = crt_idp->next)
+		if(crt_idp->dp_id == rule->orig->dpid)
+			break;
+
+	/*didn't find a dpl_id*/
+	if(!crt_idp){
+		crt_idp = (dpl_pv_id_t*)pkg_malloc(sizeof(dpl_pv_id_t));
+		if(!crt_idp){
+			LM_ERR("out of pkg memory (crt_idp)\n");
+			return -1;
+		}
+		memset(crt_idp, 0, sizeof(dpl_pv_id_t));
+		crt_idp->dp_id = rule->orig->dpid;
+		new_id = 1;
+		LM_DBG("new dpl_pv_id %i %p\n", rule->orig->dpid, crt_idp);
+	}
+
+	/*search for the corresponding dpl_index*/
+	for(indexp = last_indexp =crt_idp->first_index; indexp!=NULL;
+			last_indexp = indexp, indexp = indexp->next){
+		if(indexp->len == rule->orig->matchlen)
+			goto add_rule;
+		if((rule->orig->matchlen!=0)&&
+			((indexp->len)?(indexp->len>rule->orig->matchlen):1))
+			goto add_index;
+	}
+
+add_index:
+	LM_DBG("new index , len %i\n", rule->orig->matchlen);
+
+	new_indexp = (dpl_pv_index_t *)pkg_malloc(sizeof(dpl_pv_index_t));
+	if(!new_indexp){
+		LM_ERR("out of pkg memory\n");
+		goto err;
+	}
+	memset(new_indexp , 0, sizeof(dpl_pv_index_t));
+	new_indexp->next = indexp;
+	new_indexp->len = rule->orig->matchlen;
+
+	/*add as first index*/
+	if(last_indexp == indexp){
+		crt_idp->first_index = new_indexp;
+	}else{
+		last_indexp->next = new_indexp;
+	}
+
+	indexp = new_indexp;
+
+add_rule:
+	rule->next = 0;
+	if(!indexp->first_rule)
+		indexp->first_rule = rule;
+
+	if(indexp->last_rule)
+		indexp->last_rule->next = rule;
+
+	indexp->last_rule = rule;
+
+	if(new_id){
+		crt_idp->next = rules_pv_hash;
+		rules_pv_hash = crt_idp;
+	}
+	/*list_pv_rule(rule);*/
+
+	return 0;
+
+err:
+	if(new_id)
+		pkg_free(crt_idp);
+	return -1;
+}
 
 void destroy_hash(int index)
 {
@@ -591,6 +799,114 @@ void destroy_hash(int index)
 	rules_hash[index] = 0;
 }
 
+int generate_pv_hash(void)
+{
+	dpl_id_p crt_idp;
+	dpl_index_p indexp;
+	dpl_node_p rulep;
+	dpl_pv_node_p rule_pv;
+	int h_index = *crt_idx;
+
+	if(!rules_hash[h_index])
+		return 1;
+
+	if(*sh_revision==pv_revision){
+		LM_DBG("already loaded\n");
+		return 0;
+	}
+
+	for(crt_idp=rules_hash[h_index]; crt_idp!=NULL; crt_idp = crt_idp->next){
+		LM_DBG("DPID: %i, pointer %p\n", crt_idp->dp_id, crt_idp);
+		for(indexp=crt_idp->first_index; indexp!=NULL;indexp= indexp->next){
+			LM_DBG("INDEX LEN: %i\n", indexp->len);
+			for(rulep = indexp->first_rule; rulep!= NULL;rulep = rulep->next){
+				if(rulep->pv_flags&DP_PV_MASK){
+					rule_pv = build_pv_rule(rulep);
+					if(rule_pv){
+						if(add_rule2hash_pv(rule_pv)<0) {
+							LM_ERR("error adding pv rule\n");
+							goto err;
+						}
+					}
+					else {
+						LM_ERR("error building pv rule\n");
+						goto err;
+					}
+				}
+			}
+		}
+	}
+	pv_revision = *sh_revision;
+	return 0;
+
+err:
+	if(rule_pv) {
+		destroy_pv_rule(rule_pv);
+		pkg_free(rule_pv);
+	}
+	return -1;
+}
+
+void destroy_pv_hash(void)
+{
+	dpl_pv_id_p crt_idp;
+	dpl_pv_index_p indexp;
+	dpl_pv_node_p rulep;
+
+	if(!rules_pv_hash)
+		return;
+
+	for(crt_idp = rules_pv_hash; crt_idp != NULL;){
+
+		for(indexp = crt_idp->first_index; indexp != NULL;){
+
+			for(rulep = indexp->first_rule; rulep!= NULL;){
+
+				destroy_pv_rule(rulep);
+
+				indexp->first_rule = rulep->next;
+				pkg_free(rulep);
+				rulep=0;
+				rulep= indexp->first_rule;
+			}
+			crt_idp->first_index= indexp->next;
+			pkg_free(indexp);
+			indexp=0;
+			indexp = crt_idp->first_index;
+
+		}
+
+		rules_pv_hash = crt_idp->next;
+		pkg_free(crt_idp);
+		crt_idp = 0;
+		crt_idp = rules_pv_hash;
+	}
+
+	rules_pv_hash = 0;
+}
+
+void destroy_pv_rule(dpl_pv_node_t * rule){
+	if(!rule)
+		return;
+
+	LM_DBG("destroying pv_rule %i\n", rule->orig->dpid);
+	if(rule->match_comp){
+		pcre_free(rule->match_comp);
+		rule->match_comp = NULL;
+	}
+	if(rule->subst_comp){
+		pcre_free(rule->subst_comp);
+		rule->subst_comp = NULL;
+	}
+	if(rule->match_elem){
+		pv_elem_free_all(rule->match_elem);
+		rule->match_elem = NULL;
+	}
+	if(rule->subst_elem){
+		pv_elem_free_all(rule->subst_elem);
+		rule->subst_elem = NULL;
+	}
+}
 
 void destroy_rule(dpl_node_t * rule){
 
@@ -621,6 +937,8 @@ void destroy_rule(dpl_node_t * rule){
 
 	if(rule->attrs.s)
 		shm_free(rule->attrs.s);
+
+	lock_destroy(rule->lock);
 }
 
 
@@ -638,6 +956,25 @@ dpl_id_p select_dpid(int id)
 	return NULL;
 }
 
+dpl_pv_id_p select_pv_dpid(int id)
+{
+	dpl_pv_id_p idp;
+
+	if(*sh_revision!=pv_revision){
+		LM_DBG("new revision:%d detected\n", *sh_revision);
+		if(init_pv_data()<0){
+			LM_ERR("error reloading pv rules\n");
+			return NULL;
+		}
+	}
+
+	for(idp = rules_pv_hash; idp!=NULL; idp = idp->next){
+		if(idp->dp_id == id)
+			return idp;
+	}
+
+	return NULL;
+}
 
 /*FOR DEBUG PURPOSE*/
 void list_hash(int h_index)
@@ -674,3 +1011,40 @@ void list_rule(dpl_node_t * rule)
 			rule->attrs.len,	rule->attrs.s);
 
 }
+
+void list_pv_hash(void)
+{
+	dpl_pv_id_p crt_idp;
+	dpl_pv_index_p indexp;
+	dpl_pv_node_p rulep;
+
+	for(crt_idp=rules_pv_hash; crt_idp!=NULL; crt_idp = crt_idp->next){
+		LM_DBG("DPID: %i, pointer %p\n", crt_idp->dp_id, crt_idp);
+		for(indexp=crt_idp->first_index; indexp!=NULL;indexp= indexp->next){
+			LM_DBG("INDEX LEN: %i\n", indexp->len);
+			for(rulep = indexp->first_rule; rulep!= NULL;rulep = rulep->next){
+				list_pv_rule(rulep);
+			}
+		}
+	}
+}
+
+void list_pv_rule(dpl_pv_node_t * rule)
+{
+	LM_DBG("PV_RULE %p: next %p match_exp %.*s, "
+			"subst_exp %.*s \n", rule, rule->next,
+			rule->match_exp.len, rule->match_exp.s,
+			rule->subst_exp.len, rule->subst_exp.s);
+}
+
+void show_pv_flags(unsigned int flag)
+{
+	if(flag&DP_PV_MATCH) LM_DBG("DP_PV_MATCH\n");
+	if(flag&DP_PV_MATCH_M) LM_DBG("DP_PV_MATCH_M\n");
+	if(flag&DP_PV_MATCH_MASK) LM_DBG("DP_PV_MATCH_MASK\n");
+	if(flag&DP_PV_SUBST) LM_DBG("DP_PV_SUBST\n");
+	if(flag&DP_PV_SUBST_M) LM_DBG("DP_PV_SUBST_M\n");
+	if(flag&DP_PV_SUBST_MASK) LM_DBG("DP_PV_SUBST_MASK\n");
+	if(flag&DP_PV_MASK) LM_DBG("DP_PV_MASK\n");
+	LM_DBG("--pv_flags:%d\n", flag);
+}
diff --git a/modules/dialplan/dp_db.h b/modules/dialplan/dp_db.h
index 0078354..9130718 100644
--- a/modules/dialplan/dp_db.h
+++ b/modules/dialplan/dp_db.h
@@ -63,6 +63,7 @@ extern str repl_exp_column;
 extern str attrs_column; 
 
 int init_db_data();
+int init_pv_data();
 int dp_connect_db();
 void dp_disconnect_db();
 
diff --git a/modules/dialplan/dp_repl.c b/modules/dialplan/dp_repl.c
index ec2e5bb..2a53be4 100644
--- a/modules/dialplan/dp_repl.c
+++ b/modules/dialplan/dp_repl.c
@@ -127,13 +127,14 @@ error:
 #define MAX_PHONE_NB_DIGITS		127
 static char dp_output_buf[MAX_PHONE_NB_DIGITS+1];
 int rule_translate(struct sip_msg *msg, str string, dpl_node_t * rule,
-		str * result)
+		dpl_pv_node_t * rule_pv, str * result)
 {
 	int repl_nb, offset, match_nb, rc, cap_cnt;
 	struct replace_with token;
 	pcre *subst_comp;
 	struct subst_expr * repl_comp;
 	str match;
+	str match_exp, subst_exp;
 	pv_value_t sv;
 	str* uri;
 	int ovector[3 * (MAX_REPLACE_WITH + 1)];
@@ -144,7 +145,25 @@ int rule_translate(struct sip_msg *msg, str string, dpl_node_t * rule,
 	result->s = dp_output_buf;
 	result->len = 0;
 
-	subst_comp 	= rule->subst_comp;
+	if(rule_pv&&(rule!=rule_pv->orig)){
+		LM_ERR("rule and rule_pv don not match\n");
+		return -1;
+	}
+
+	if(rule_pv&&(rule_pv->orig->pv_flags&DP_PV_SUBST)){
+		subst_comp 	= rule_pv->subst_comp;
+		subst_exp = rule_pv->subst_exp;
+	}
+	else{
+		subst_comp 	= rule->subst_comp;
+		subst_exp = rule->subst_exp;
+	}
+	if(rule_pv&&(rule_pv->orig->pv_flags&DP_PV_MATCH)){
+		match_exp = rule_pv->match_exp;
+	}
+	else{
+		match_exp = rule->match_exp;
+	}
 	repl_comp 	= rule->repl_comp;
 
 	if(!repl_comp){
@@ -168,13 +187,13 @@ int rule_translate(struct sip_msg *msg, str string, dpl_node_t * rule,
 		}
 
 		/*search for the pattern from the compiled subst_exp*/
-		if (pcre_exec(rule->subst_comp, NULL, string.s, string.len,
+		if (pcre_exec(subst_comp, NULL, string.s, string.len,
 					0, 0, ovector, 3 * (MAX_REPLACE_WITH + 1)) <= 0) {
 			LM_ERR("the string %.*s matched "
 					"the match_exp %.*s but not the subst_exp %.*s!\n", 
 					string.len, string.s, 
-					rule->match_exp.len, rule->match_exp.s,
-					rule->subst_exp.len, rule->subst_exp.s);
+					match_exp.len, match_exp.s,
+					subst_exp.len, subst_exp.s);
 			return -1;
 		}
 	}
@@ -308,13 +327,141 @@ error:
 	return -1;
 }
 
+dpl_pv_node_p get_pv_rule(dpl_node_p rule, unsigned int index, unsigned int user_len)
+{
+	dpl_pv_id_p idp;
+	dpl_pv_index_p indexp;
+	dpl_pv_node_p rulep;
+
+
+	idp = select_pv_dpid(index);
+	if(!idp) {
+		LM_ERR("no pv idp:%d\n", rule->dpid);
+		return NULL;
+	}
+	for(indexp = idp->first_index; indexp!=NULL; indexp = indexp->next)
+		if(!indexp->len || (indexp->len!=0 && indexp->len == user_len) )
+			break;
+
+	if(!indexp || (indexp!= NULL && !indexp->first_rule)){
+		LM_DBG("no pv rule for len %i\n", user_len);
+		return NULL;
+	}
+
+search_rule:
+	for(rulep=indexp->first_rule; rulep!=NULL; rulep= rulep->next) {
+		if(rulep->orig==rule) return rulep;
+	}
+
+	/*test the rules with len 0*/
+	if(indexp->len){
+		for(indexp = indexp->next; indexp!=NULL; indexp = indexp->next)
+			if(!indexp->len)
+				break;
+		if(indexp)
+			goto search_rule;
+	}
+
+	LM_DBG("no matching rule\n");
+	return NULL;
+}
+
+/* Compile pcre pattern */
+static pcre *reg_ex_comp_pv(const char *pattern, int *cap_cnt)
+{
+	pcre *re;
+	const char *error;
+	int rc, err_offset;
+	size_t size;
+
+	re = pcre_compile(pattern, 0, &error, &err_offset, NULL);
+	if (re == NULL) {
+		LM_ERR("PCRE compilation of '%s' failed at offset %d: %s\n",
+				pattern, err_offset, error);
+		return NULL;
+	}
+	rc = pcre_fullinfo(re, NULL, PCRE_INFO_SIZE, &size);
+	if (rc != 0) {
+		pcre_free(re);
+		LM_ERR("pcre_fullinfo on compiled pattern '%s' yielded error: %d\n",
+				pattern, rc);
+		return NULL;
+	}
+	rc = pcre_fullinfo(re, NULL, PCRE_INFO_CAPTURECOUNT, cap_cnt);
+	if (rc != 0) {
+		pcre_free(re);
+		LM_ERR("pcre_fullinfo on compiled pattern '%s' yielded error: %d\n",
+				pattern, rc);
+		return NULL;
+	}
+	return re;
+}
+
+int build_pv_comp(struct sip_msg *msg, dpl_pv_node_t *rule)
+{
+	int cap_cnt = 0;
+	struct subst_expr *repl_comp = NULL;
+
+	if(!rule)
+		return -1;
+
+	if(rule->orig->pv_flags&DP_PV_MATCH){
+		if(pv_printf_s(msg, rule->match_elem, &(rule->match_exp))<0){
+ 			LM_ERR("Can't get match expression value\n");
+ 			return -1;
+ 		}
+ 		if(rule->match_comp) pcre_free(rule->match_comp);
+		rule->match_comp = reg_ex_comp_pv(rule->match_exp.s, &cap_cnt);
+		if(!rule->match_comp){
+			LM_ERR("failed to compile match expression %.*s\n",
+					rule->match_exp.len, rule->match_exp.s);
+			return -1;
+		}
+	}
+
+	if(rule->orig->pv_flags&DP_PV_SUBST){
+		if(pv_printf_s(msg, rule->subst_elem, &(rule->subst_exp))<0){
+ 			LM_ERR("Can't get subst expression value\n");
+ 			return -1;
+ 		}
+ 		if(rule->subst_comp) pcre_free(rule->subst_comp);
+		rule->subst_comp = reg_ex_comp_pv(rule->subst_exp.s, &cap_cnt);
+		if(!rule->subst_comp){
+			LM_ERR("failed to compile subst expression %.*s\n",
+					rule->subst_exp.len, rule->subst_exp.s);
+			return -1;
+		}
+		if (cap_cnt > MAX_REPLACE_WITH) {
+			LM_ERR("subst expression %.*s has too many sub-expressions\n",
+					rule->subst_exp.len, rule->subst_exp.s);
+			return -1;
+		}
+	}
+
+	if(rule->orig->pv_flags&DP_PV_MASK) {
+		repl_comp = rule->orig->repl_comp;
+		if (repl_comp && (cap_cnt < repl_comp->max_pmatch) &&
+				(repl_comp->max_pmatch != 0)) {
+			LM_ERR("repl_exp %.*s refers to %d sub-expressions, but "
+					"subst_exp %.*s has only %d\n",
+					rule->orig->repl_exp.len, rule->orig->repl_exp.s,
+					repl_comp->max_pmatch, rule->subst_exp.len,
+					rule->subst_exp.s, cap_cnt);
+			return -1;
+		}
+	}
+	return 0;
+}
+
 #define DP_MAX_ATTRS_LEN	128
 static char dp_attrs_buf[DP_MAX_ATTRS_LEN+1];
 int translate(struct sip_msg *msg, str input, str *output, dpl_id_p idp,
 		str *attrs)
 {
 	dpl_node_p rulep;
+	dpl_pv_node_p rule_pv;
 	dpl_index_p indexp;
+	pcre *match_comp = NULL;
 	int user_len, rez;
 	char b;
 
@@ -339,7 +486,27 @@ search_rule:
 
 			case DP_REGEX_OP:
 				LM_DBG("regex operator testing\n");
-				rez = pcre_exec(rulep->match_comp, NULL, input.s, input.len,
+				if(rulep->pv_flags&DP_PV_MATCH) {
+					if(!msg) {
+						LM_ERR("Cannot translate using a regex match with pv "
+							"without message\n");
+						continue;
+					}
+					rule_pv = get_pv_rule(rulep, idp->dp_id, user_len);
+					if(rule_pv) {
+						if(build_pv_comp(msg, rule_pv)<0){
+							LM_ERR("error rule regex comp. Skip this\n");
+							continue;
+						}
+						match_comp = rule_pv->match_comp;
+					}
+					else {
+						LM_ERR("pv rule not found.Skip this\n");
+						continue;
+					}
+				}
+				else match_comp = rulep->match_comp;
+				rez = pcre_exec(match_comp, NULL, input.s, input.len,
 						0, 0, NULL, 0);
 				break;
 
@@ -382,8 +549,9 @@ search_rule:
 	return -1;
 
 repl:
-	LM_DBG("found a matching rule %p: pr %i, match_exp %.*s\n",
-			rulep, rulep->pr, rulep->match_exp.len, rulep->match_exp.s);
+	LM_DBG("found a matching rule %p: pr %i, match_exp %.*s pv_flags:%d\n",
+			rulep, rulep->pr, rulep->match_exp.len, rulep->match_exp.s,
+			rulep->pv_flags);
 
 	if(attrs) {
 		attrs->len = 0;
@@ -405,7 +573,10 @@ repl:
 		}
 	}
 
-	if(rule_translate(msg, input, rulep, output)!=0){
+	if(!(rulep->pv_flags&DP_PV_MASK))
+		rule_pv = NULL;
+
+	if(rule_translate(msg, input, rulep, rule_pv, output)!=0){
 		LM_ERR("could not build the output\n");
 		return -1;
 	}
-- 
2.1.4

